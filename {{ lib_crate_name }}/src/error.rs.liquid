use serde_json;
use std::io;
use thiserror::Error;

#[derive(Debug, Error)]
pub enum Error {
    #[error("Failed to process file: {0}")]
    Io(#[from] io::Error),

    #[error("Failed to parse JSON: {0}")]
    Json(#[from] serde_json::Error),

    #[error("Invalid configuration: {0}")]
    Config(String),

    #[error("Unexpected error: {0}")]
    Unknown(String),
}

pub type Result<T> = std::result::Result<T, Error>;

impl Error {
    pub fn exit_code(&self) -> i32 {
        match self {
            Error::Io(_) => 2,
            Error::Json(_) | Error::Config(_) => 3,
            Error::Unknown(_) => 1,
        }
    }

    /// Pretty print the error for users
    pub fn display_cli(&self) {
        eprintln!("‚ùå {}", self);
    }
}
